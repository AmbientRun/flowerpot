[package]
id = "actions"
name = "actions"
version = "0.0.1"
content = { type = "Asset", schema = true, code = true }

[dependencies]
crops = { path = "../crops" }
items = { path = "../items" }
map = { path = "../map" }
player = { path = "../player" }
things = { path = "../../utils/things" }

[messages.RegisterCraftingAction]
name = "RegisterCraftingAction"
description = "Registers a crafting action with the action store."

[messages.RegisterCraftingAction.fields]
id = "String"
primary_held  = "EntityId"
secondary_held  = "EntityId"

[messages.RegisterMediumCropAction]
name = "RegisterMediumCropAction"
description = "Registers a medium crop action with the action store."

[messages.RegisterMediumCropAction.fields]
id = "String"
class = "EntityId"
primary_held = "EntityId"
secondary_held = "EntityId"

[messages.RegisterTileAction]
name = "RegisterTileAction"
description = "Registers a tile action with the action store."

[messages.RegisterTileAction.fields]
id = "String"
primary_held = "EntityId"
secondary_held = "EntityId"

[messages.OnAction]
name = "OnAction"
description = "Sent to the registering module when the registered action is performed."

[messages.OnAction.fields]
id = "String"
player = "EntityId"
right_is_primary = "Bool"
target = "EntityId"

[messages.PerformCraftingAction]
name = "PerformCraftingAction"
description = "Client-to-server message to perform a crafting action."
fields = {}

[messages.PerformTileAction]
name = "PerformTileAction"
description = "Client-to-server message to perform an action of a tile or an occupant of a tile."

[messages.PerformTileAction.fields]
chunk_pos = "Ivec2"
tile_idx = "U8"
on_occupant = "Bool"

[messages.PerformSwap]
name = "PerformSwap"
description = "Client-to-server message to swap a player's held items."
fields = {}
